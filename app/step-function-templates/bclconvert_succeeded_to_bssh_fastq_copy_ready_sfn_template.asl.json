{
  "Comment": "A description of my state machine",
  "StartAt": "Get Input Vars",
  "States": {
    "Get Input Vars": {
      "Type": "Pass",
      "Next": "Get Workflow Inputs",
      "Assign": {
        "instrumentRunId": "{% $input.instrumentRunId %}",
        "bsshAnalysisId": "{% $input.bsshAnalysisId %}",
        "bsshProjectId": "{% $input.bsshProjectId %}"
      }
    },
    "Get Workflow Inputs": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Add Portal Run ID and Workflow Run Name",
          "States": {
            "Add Portal Run ID and Workflow Run Name": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__add_portal_run_id_and_workflow_run_name_lambda_function_arn__}",
                "Payload": {}
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "portalRunId": "{% $states.result.Payload.portalRunId %}",
                "workflowRunName": "{% $states.result.Payload.workflowRunName %}"
              }
            }
          }
        },
        {
          "StartAt": "Get Library Objects from SampleSheet",
          "States": {
            "Get Library Objects from SampleSheet": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_library_objects_from_samplesheet_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "libraryObjects": "{% $states.result.Payload.libraryObjects %}"
              }
            }
          }
        }
      ],
      "Next": "Add Engine Parameters and Tags",
      "Assign": {
        "portalRunId": "{% $states.result[0].portalRunId %}",
        "workflowName": "{% $states.result[0].workflowName %}",
        "workflowVersion": "{% $states.result[0].workflowVersion %}",
        "workflowRunName": "{% $states.result[0].workflowRunName %}",
        "libraryObjects": "{% $states.result[1].libraryObjects %}"
      }
    },
    "Add Engine Parameters and Tags": {
      "Type": "Parallel",
      "Next": "Launch Ready Event",
      "Branches": [
        {
          "StartAt": "Add Engine Parameters",
          "States": {
            "Add Engine Parameters": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__add_engine_parameters_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "portalRunId": "{% $portalRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "engineParameters": "{% $states.result.Payload.engineParameters %}"
              }
            }
          }
        },
        {
          "StartAt": "Add Tags",
          "States": {
            "Add Tags": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__add_tags_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "tags": "{% $states.result.Payload.tags %}"
              }
            }
          }
        }
      ],
      "Assign": {
        "engineParameters": "{% $states.result[0].engineParameters %}",
        "tags": "{% $states.result[1].tags %}"
      }
    },
    "Launch Ready Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": {
              "status": "READY",
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "portalRunId": "{% $portalRunId %}",
              "workflowName": "{% $workflowName %}",
              "workflowVersion": "{% $workflowVersion %}",
              "workflowRunName": "{% $workflowRunName %}",
              "linkedLibraries": "{% $libraryObjects %}",
              "payload": {
                "version": "${__bssh_payload_version__}",
                "data": {
                  "inputs": {
                    "bsshAnalysisId": "{% $bsshAnalysisId %}",
                    "bsshProjectId": "{% $bsshProjectId %}",
                    "instrumentRunId": "{% $instrumentRunId %}"
                  },
                  "engineParameters": "{% $engineParameters %}",
                  "tags": "{% $tags %}"
                }
              }
            }
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
