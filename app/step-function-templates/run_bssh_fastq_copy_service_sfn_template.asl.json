{
  "QueryLanguage": "JSONata",
  "Comment": "Generate an icav2 manifest file for copying data out from a bclconvert workflow session, then deploy and wait for the copy jobs to complete",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Next": "Submit Running Event",
      "Assign": {
        "workflowInputs": "{% $states.input %}",
        "iterableCount": 0
      }
    },
    "Submit Running Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": {
              "status": "RUNNING",
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "portalRunId": "{% $workflowInputs.portalRunId %}",
              "workflowName": "{% $workflowInputs.workflowName %}",
              "workflowVersion": "{% $workflowInputs.workflowVersion %}",
              "workflowRunName": "{% $workflowInputs.workflowRunName %}",
              "linkedLibraries": "{% $workflowInputs.linkedLibraries %}",
              "payload": {
                "version": "{% $workflowInputs.payload.version %}",
                "data": {
                  "inputs": "{% $workflowInputs.payload.data.inputs %}",
                  "engineParameters": "{% $workflowInputs.payload.data.engineParameters %}",
                  "tags": "{% $workflowInputs.payload.data.tags %}"
                }
              }
            }
          }
        ]
      },
      "Next": "Get Manifest"
    },
    "Get Manifest": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "For each copy job request",
      "Arguments": {
        "FunctionName": "${__get_manifest_and_fastq_list_rows_lambda_function_arn__}",
        "Payload": {
          "projectId": "{% $workflowInputs.payload.data.inputs.bsshProjectId %}",
          "analysisId": "{% $workflowInputs.payload.data.inputs.bsshAnalysisId %}",
          "outputUri": "{% $workflowInputs.payload.data.engineParameters.outputUri %}"
        }
      },
      "Assign": {
        "icav2CopyJobList": "{% $states.result.Payload.icav2CopyJobList %}"
      }
    },
    "For each copy job request": {
      "Type": "Map",
      "Items": "{% $icav2CopyJobList %}",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Launch Copy Job",
        "States": {
          "Launch Copy Job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
            "End": true,
            "Arguments": {
              "Entries": [
                {
                  "EventBusName": "${__event_bus_name__}",
                  "DetailType": "${__icav2_data_copy_detail_type__}",
                  "Source": "${__stack_event_source__}",
                  "Detail": {
                    "payload": {
                      "sourceUriList": "{% $states.input.sourceUriList %}",
                      "destinationUri": "{% $states.input.destinationUri %}"
                    },
                    "taskToken": "{% $states.context.Task.Token %}"
                  }
                }
              ]
            }
          }
        }
      },
      "Next": "Wait for filemanager sync"
    },
    "Wait for filemanager sync": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__filemanager_sync_lambda_function_arn__}",
        "Payload": {
          "s3Prefix": "{% $workflowInputs.payload.data.engineParameters.outputUri %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Is Synced",
      "Assign": {
        "isSynced": "{% $states.result.Payload.isSynced %}"
      }
    },
    "Is Synced": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Submit Succeeded Event",
          "Condition": "{% $isSynced %}",
          "Comment": "Is Synced"
        },
        {
          "Next": "Fail",
          "Condition": "{% $iterableCount > 60 %}",
          "Comment": "Not synced within 5 minutes"
        }
      ],
      "Default": "Wait 5 Seconds"
    },
    "Wait 5 Seconds": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Wait for filemanager sync",
      "Assign": {
        "iterableCount": "{% $iterableCount + 1 %}"
      }
    },
    "Submit Succeeded Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": {
              "status": "SUCCEEDED",
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "portalRunId": "{% $workflowInputs.portalRunId %}",
              "workflowName": "{% $workflowInputs.workflowName %}",
              "workflowVersion": "{% $workflowInputs.workflowVersion %}",
              "workflowRunName": "{% $workflowInputs.workflowRunName %}",
              "linkedLibraries": "{% $workflowInputs.linkedLibraries %}",
              "payload": {
                "version": "{% $workflowInputs.payload.version %}",
                "data": {
                  "inputs": "{% $workflowInputs.payload.data.inputs %}",
                  "engineParameters": "{% $workflowInputs.payload.data.engineParameters %}",
                  "outputs": {
                    "outputUri": "{% $workflowInputs.payload.data.engineParameters.outputUri %}",
                    "instrumentRunId": "{% $workflowInputs.payload.data.inputs.instrumentRunId %}"
                  },
                  "tags": "{% $workflowInputs.payload.data.tags %}"
                }
              }
            }
          }
        ]
      },
      "End": true
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
