{
  "QueryLanguage": "JSONata",
  "Comment": "Generate an icav2 manifest file for copying data out from a bclconvert workflow session, then deploy and wait for the copy jobs to complete",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Next": "Get workflow run object",
      "Assign": {
        "portalRunId": "{% $states.input.portalRunId %}",
        "iterableCount": 0
      }
    },
    "Get workflow run object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": {},
      "Arguments": {
        "FunctionName": "${__get_workflow_run_object_lambda_function_arn__}",
        "Payload": {
          "portalRunId": "{% $portalRunId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Is New workflow manager deployed",
      "Assign": {
        "workflowRunObject": "{% $states.result.Payload.workflowRunObject %}"
      }
    },
    "Is New workflow manager deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Put RUNNING Event",
          "Condition": "{% ${__new_workflow_manager_is_deployed__} %}",
          "Comment": "New workflow manager is deployed"
        }
      ],
      "Default": "Put RUNNING Event (legacy)"
    },
    "Put RUNNING Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_update_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": "{% /* Merge workflow event with new values */\n[\n  $workflowRunObject,\n  {\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"status\": \"RUNNING\"\n  }\n] ~> \n$merge\n %}"
          }
        ]
      },
      "Next": "Get Manifest"
    },
    "Put RUNNING Event (legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": "{% /* Merge workflow event with new values */\n[\n  $workflowRunObject,\n  {\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"status\": \"RUNNING\"\n  }\n] ~> \n$merge ~>\n/* Convert libraries */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Convert Workflow */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] |\n %}"
          }
        ]
      },
      "Next": "Get Manifest"
    },
    "Get Manifest": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "For each copy job request",
      "Arguments": {
        "FunctionName": "${__get_icav2_copy_job_list_lambda_function_arn__}",
        "Payload": {
          "projectId": "{% $workflowRunObject.payload.data.inputs.bsshProjectId %}",
          "analysisId": "{% $workflowRunObject.payload.data.inputs.bsshAnalysisId %}",
          "outputUri": "{% $workflowRunObject.payload.data.engineParameters.outputUri %}"
        }
      },
      "Assign": {
        "icav2CopyJobList": "{% $states.result.Payload.icav2CopyJobList %}"
      }
    },
    "For each copy job request": {
      "Type": "Map",
      "Items": "{% $icav2CopyJobList %}",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Launch Copy Job",
        "States": {
          "Launch Copy Job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
            "End": true,
            "Arguments": {
              "Entries": [
                {
                  "EventBusName": "${__event_bus_name__}",
                  "DetailType": "${__icav2_data_copy_detail_type__}",
                  "Source": "${__stack_event_source__}",
                  "Detail": {
                    "payload": {
                      "sourceUriList": "{% $states.input.sourceUriList %}",
                      "destinationUri": "{% $states.input.destinationUri %}"
                    },
                    "taskToken": "{% $states.context.Task.Token %}"
                  }
                }
              ]
            },
            "Retry": [
              {
                "ErrorEquals": ["States.HeartbeatTimeout"],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3
              }
            ],
            "HeartbeatSeconds": 3600
          }
        }
      },
      "Next": "Run Filemanager sync"
    },
    "Run Filemanager sync": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__run_filemanager_sync_lambda_function_arn__}",
        "Payload": {
          "s3Prefix": "{% $workflowRunObject.payload.data.engineParameters.outputUri %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Add portal run id attributes",
      "Output": {}
    },
    "Add portal run id attributes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${__add_portal_run_id_attributes_lambda_function_arn__}",
        "Payload": {
          "outputUri": "{% $workflowRunObject.payload.data.engineParameters.outputUri %}",
          "portalRunId": "{% $portalRunId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait for filemanager sync"
    },
    "Wait for filemanager sync": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__filemanager_sync_lambda_function_arn__}",
        "Payload": {
          "s3Prefix": "{% $workflowRunObject.payload.data.engineParameters.outputUri %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Is Synced",
      "Assign": {
        "isSynced": "{% $states.result.Payload.isSynced %}"
      }
    },
    "Is Synced": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Is New Workflow Manager Deployed",
          "Condition": "{% $isSynced %}",
          "Comment": "Is Synced"
        },
        {
          "Next": "Fail",
          "Condition": "{% $iterableCount > 60 %}",
          "Comment": "Not synced within 5 minutes"
        }
      ],
      "Default": "Wait 5 Seconds"
    },
    "Is New Workflow Manager Deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Put SUCCEEDED Event",
          "Condition": "{% ${__new_workflow_manager_is_deployed__} %}",
          "Comment": "New Workflow Manager is deployed"
        }
      ],
      "Default": "Put SUCCEEDED Event (legacy)"
    },
    "Put SUCCEEDED Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_update_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": "{% /* Merge workflow event with new values */\n[\n  $workflowRunObject,\n  {\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"status\": \"SUCCEEDED\"\n  }\n] ~> \n$merge\n %}"
          }
        ]
      },
      "End": true
    },
    "Wait 5 Seconds": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Run Filemanager sync",
      "Assign": {
        "iterableCount": "{% $iterableCount + 1 %}"
      }
    },
    "Put SUCCEEDED Event (legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "Source": "${__stack_event_source__}",
            "Detail": "{% /* Merge workflow event with new values */\n[\n  $workflowRunObject,\n  {\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"status\": \"SUCCEEDED\"\n  }\n] ~> \n$merge ~>\n/* Convert libraries */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Convert Workflow */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] |\n %}"
          }
        ]
      },
      "End": true
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
